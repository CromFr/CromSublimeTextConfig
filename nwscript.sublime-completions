{
    "scope": "source.nss",

    "completions":
    [
        { 
		"trigger": "while.validnext", 
		"contents": "${1:/*Variable Type*/} ${2:/*Variable Name*/}=GetFirst${3:/*Get Type*/}(${4:/*Get Args*/});\nwhile(GetIs${1:/*Variable Type*/}Valid(${2:/*Variable Name*/}))\n{\n\t${0:/* code */}\n\t${2:/*variable*/}=GetNext${3:/*Get Type*/}(${4:/*Get Args*/});\n}",
        "description": "While loop to browse data with GetFirst[...]/GetNext[...]"
    	},
        { 
		"trigger": "while.", 
		"contents": "while(${1:/*Condition*/})\n{\n\t${0:/*Code*/}\n}"
    	},
        { 
		"trigger": "for.count", 
		"contents": "int ${1:/*Variable Name*/};\nfor(${1:/*Variable Name*/}=0 ; ${1:/*Variable Name*/}<${2:/*Count*/} ; ${1:/*Variable Name*/}++)\n{\n\t${0:/*Code*/}\n}"
    	},
        { 
		"trigger": "switch.", 
		"contents": "switch(${1:/*Variable Name*/})\n{\n\tcase 0:\n\t\t${0:/*Code*/}\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n}"
    	},
        { 
		"trigger": "if.", 
		"contents": "if(${1:/*Condition*/})\n{\n\t${0:/*Code*/}\n}"
    	},
        { 
        "trigger": "if.inline", 
        "contents": "if(${1:/*Condition*/})\n\t${0:/*Code*/}"
        },
        { 
		"trigger": "if.else", 
		"contents": "if(${1:/*Condition*/})\n{\n\t${0:/*Code*/}\n}\nelse\n{\n\t${0:/*Code*/}\n}"
    	},
        { 
		"trigger": "do.", 
		"contents": "do\n{\n\t${0:/*Code*/}\n}while(${1:/*Condition*/});"
    	},
        { 
		"trigger": "struct.", 
		"contents": "struct ${1:/*Struct Name*/}\n{\n\t${0:/*Content*/}\n};"
    	},
        { 
		"trigger": "#include.", 
		"contents": "#include \"${1:${TM_FILENAME/\\..+$/_inc/}}\""
    	},
        { 
		"trigger": "void main.", 
		"contents": "void main(${1:/*Args*/})\n{\n\t${0:/*Code*/}\n}"
    	},
        { 
		"trigger": "int StartingConditional.", 
		"contents": "int StartingConditional(${1:/*Args*/})\n{\n\t${0:/*Code*/}\n\treturn TRUE;\n}"
    	},



        {"trigger": "AssignCommand(oActionSubject, aActionToAssign)", 
         "contents": "AssignCommand(${1:/*oActionSubject*/}, ${2:/*aActionToAssign*/})"
        },
        {"trigger": "AssignCutsceneActionToObject(oObject, aAction)", 
         "contents": "AssignCutsceneActionToObject(${1:/*oObject*/}, ${2:/*aAction*/})"
        },
        {"trigger": "DelayCommand(fSeconds, aActionToDelay)", 
         "contents": "DelayCommand(${1:/*fSeconds*/}, ${2:/*aActionToDelay*/})"
        }
    ]
}